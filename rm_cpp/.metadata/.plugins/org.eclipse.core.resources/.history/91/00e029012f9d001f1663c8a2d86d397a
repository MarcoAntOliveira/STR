#ifndef RM_H
#define RM_H

#include "stm32f1xx_hal.h"  // Inclua a biblioteca HAL conforme o microcontrolador utilizado
#include <stdint.h>
#include <atomic>

// Estrutura da tarefa com campos atômicos
struct Tarefa {
    uint8_t id;
    uint8_t periodo_ms;
    std::atomic<uint32_t> proxima_execucao;
    uint8_t prioridade;
    std::atomic<bool> ativa;
    uint8_t nucleo; // Núcleo designado para a tarefa

    Tarefa(uint8_t i, uint8_t p, uint8_t prio, uint8_t nucleo_dest);
    void atualizar_proxima_execucao();
};

// Classe Escalonador com métodos para adicionar, obter e balancear tarefas
class Escalonador {
public:
    void adicionarTarefa(const Tarefa& tarefa);
    Tarefa* obterProximaTarefa(uint8_t nucleo);
    void balancearCarga();

private:
    Tarefa tarefas[20];
    std::atomic<int> num_tarefas{0};
};
#endif /* RM_H */
